{{ define "kubeRBACProxy" }} name: kube-rbac-proxy-{{ .Suffix }}
          image: {{ .KubeRBACProxyImage}}
          args:
            - --secure-listen-address=0.0.0.0:{{ .DownstreamPort }}
            - --upstream={{ .UpstreamProtocol }}://{{ .UpstreamHost }}:{{ .UpstreamPort }}/
            - --config-file=/etc/kube-rbac-proxy/config.yaml
            - --tls-cert-file=/etc/tls/private/tls.crt
            - --tls-private-key-file=/etc/tls/private/tls.key
            - --proxy-endpoints-port={{ .HealthPort }}
            - --v=0
          ports:
            - containerPort: {{ .DownstreamPort }}
              name: https
              protocol: TCP
            - containerPort: {{ .HealthPort }}
              name: proxy-healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .HealthPort }}
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .HealthPort }}
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
            - name: tls-certs
              mountPath: /etc/tls/private
              readOnly: true
            - name: kube-rbac-proxy-{{ .Suffix }}-config
              mountPath: /etc/kube-rbac-proxy
              readOnly: true
{{ end }}

kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{.Orchestrator.Name}}
  namespace: {{.Orchestrator.Namespace}}
  labels:
    app: {{.Orchestrator.Name}}
    component: {{.Orchestrator.Name}}
    deploy-name: {{.Orchestrator.Name}}
    app.kubernetes.io/instance: {{.Orchestrator.Name}}
    app.kubernetes.io/name: {{.Orchestrator.Name}}
    app.kubernetes.io/part-of: trustyai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{.Orchestrator.Name}}
      component: {{.Orchestrator.Name}}
      deploy-name: {{.Orchestrator.Name}}
      app.kubernetes.io/instance: {{.Orchestrator.Name}}
      app.kubernetes.io/name: {{.Orchestrator.Name}}
      app.kubernetes.io/part-of: trustyai
  template:
    metadata:
      labels:
        app: {{.Orchestrator.Name}}
        component: {{.Orchestrator.Name}}
        deploy-name: {{.Orchestrator.Name}}
        app.kubernetes.io/instance: {{.Orchestrator.Name}}
        app.kubernetes.io/name: {{.Orchestrator.Name}}
        app.kubernetes.io/part-of: trustyai
    spec:
      volumes:
{{- if or .Orchestrator.Spec.OrchestratorConfig (and .Orchestrator.Status.AutoConfigState .Orchestrator.Status.AutoConfigState.GeneratedConfigMap) }}
        - name: {{.Orchestrator.Name}}-config
          configMap:
            name:  {{ if .Orchestrator.Spec.OrchestratorConfig }}{{ .Orchestrator.Spec.OrchestratorConfig }}{{ else }}{{ .Orchestrator.Status.AutoConfigState.GeneratedConfigMap }}{{ end }}
            defaultMode: 420
{{- end}}
{{- if .Orchestrator.Spec.SidecarGatewayConfig }}
        - name: {{.Orchestrator.Name}}-sidecar-gateway-config
          configMap:
            name: {{.Orchestrator.Spec.SidecarGatewayConfig}}
            defaultMode: 420
{{- else if and .Orchestrator.Status.AutoConfigState .Orchestrator.Status.AutoConfigState.GeneratedGatewayConfigMap }}
        - name: {{.Orchestrator.Name}}-sidecar-gateway-config
          configMap:
            name: {{.Orchestrator.Status.AutoConfigState.GeneratedGatewayConfigMap}}
            defaultMode: 420
{{- end }}
        - name: tls-certs
          secret:
            secretName: {{ .Orchestrator.Name }}-tls
            defaultMode: 420
        - name: tls-ca-bundle
          configMap:
            name: {{.Orchestrator.Name }}-ca-bundle
            defaultMode: 420
        {{- if .OrchestratorKubeRBACProxy }}
        - name: kube-rbac-proxy-orchestrator-config
          configMap:
            name: {{.Orchestrator.Name}}-kube-rbac-proxy-orchestrator-config
            defaultMode: 420
        {{- end }}
        {{- if .GatewayKubeRBACProxy }}
        - name: kube-rbac-proxy-gateway-config
          configMap:
            name: {{.Orchestrator.Name}}-kube-rbac-proxy-gateway-config
            defaultMode: 420
        {{- end }}
{{- if .Orchestrator.Spec.CustomDetectorsConfig }}
        - name: custom-detectors-config
          configMap:
            name: {{.Orchestrator.Spec.CustomDetectorsConfig}}
            defaultMode: 420
{{- end }}
      serviceAccountName: {{.Orchestrator.Name}}-serviceaccount
      containers:
        - name: {{.Orchestrator.Name}}
          image: {{.ContainerImages.OrchestratorImage}}
          env:
            - name: ORCHESTRATOR_CONFIG
              value: /config/config.yaml
            - name: HTTP_PORT
              value: '8032'
            - name: RUST_BACKTRACE
              value: 'full'
            - name: TLS_CERT_PATH
              value: /etc/tls/private/tls.crt
            - name: TLS_KEY_PATH
              value: /etc/tls/private/tls.key
            - name: RUST_LOG
              value: '{{if .Orchestrator.Spec.LogLevel}}{{.Orchestrator.Spec.LogLevel}}{{else}}info{{end}}'
            {{- if .Orchestrator.Spec.OTelExporter.OTLPProtocol }}
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: {{.Orchestrator.Spec.OTelExporter.OTLPProtocol}}
          {{end}}
          {{if .Orchestrator.Spec.OTelExporter.OTLPTracesEndpoint}}
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: {{.Orchestrator.Spec.OTelExporter.OTLPTracesEndpoint}}{{end}}
            {{- if .Orchestrator.Spec.OTelExporter.OTLPMetricsEndpoint}}
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: {{.Orchestrator.Spec.OTelExporter.OTLPMetricsEndpoint}}{{end}}
            {{- if and .Orchestrator.Spec.OTelExporter.EnableTraces .Orchestrator.Spec.OTelExporter.EnableMetrics}}
            - name: OTLP_EXPORT
              value: "traces,metrics"
          {{else if .Orchestrator.Spec.OTelExporter.EnableTraces}}
            - name: OTLP_EXPORT
              value: "traces"
          {{else if .Orchestrator.Spec.OTelExporter.EnableMetrics}}
            - name: OTLP_EXPORT
              value: "metrics"
          {{end}}
          volumeMounts:
            - name: {{.Orchestrator.Name}}-config
              readOnly: true
              mountPath: /config/config.yaml
              subPath: config.yaml
            - name: tls-certs
              mountPath: /etc/tls/private
              readOnly: true
            - name: tls-ca-bundle
              mountPath: /etc/tls/ca
              readOnly: true
          ports:
            - name: https
              containerPort: {{ if or .Orchestrator.Spec.SidecarGatewayConfig (and .Orchestrator.Status.AutoConfigState .Orchestrator.Status.AutoConfigState.GeneratedGatewayConfigMap) }}8032{{ else }}8033{{ end }}
              protocol: TCP
          imagePullPolicy: Always
          terminationMessagePolicy: File
          resources:
            limits:
              cpu: '1'
              memory: 2Gi
            requests:
              cpu: '1'
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            readinessProbe:
              httpGet:
                path: /health
                port: 8033
                scheme: HTTP
              initialDelaySeconds: 10
              timeoutSeconds: 10
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            command:
              - /app/bin/fms-guardrails-orchestr8
        {{ if .Orchestrator.Spec.EnableGuardrailsGateway }}
        - name: {{.Orchestrator.Name}}-gateway
          image: {{.ContainerImages.GuardrailsGatewayImage}}
          command: [ "/app/bin/vllm-orchestrator-gateway" ]
          volumeMounts:
            - name: {{.Orchestrator.Name}}-sidecar-gateway-config
              readOnly: true
              mountPath: /config/config.yaml
              subPath: config.yaml
            - name: tls-certs
              mountPath: /etc/tls/private
              readOnly: true
            - name: tls-ca-bundle
              mountPath: /etc/tls/ca
              readOnly: true
          env:
            - name: GATEWAY_CONFIG
              value: /config/config.yaml
            - name: RUST_LOG
              value: '{{if .Orchestrator.Spec.LogLevel}}{{.Orchestrator.Spec.LogLevel}}{{else}}info{{end}}'
            - name: GATEWAY_USE_MTLS
              value: 'false'
        {{ if .GatewayKubeRBACProxy }}
        - {{- template "kubeRBACProxy" .GatewayKubeRBACProxy }}
        {{end}}
        {{end}}
        {{ if .Orchestrator.Spec.EnableBuiltInDetectors }}
        - name: {{.Orchestrator.Name}}-detectors
          image: {{.ContainerImages.DetectorImage}}
          command: [ "/app/bin/regex-detector" ]
          {{ if .Orchestrator.Spec.CustomDetectorsConfig }}
          volumeMounts:
            - name: custom-detectors-config
              readOnly: true
              mountPath: /app/custom_detectors/custom_detectors.py
              subPath: custom_detectors.py
          {{end}}
        {{end}}
        {{- if .OrchestratorKubeRBACProxy -}}
        - {{- template "kubeRBACProxy" .OrchestratorKubeRBACProxy }}
        {{end}}
