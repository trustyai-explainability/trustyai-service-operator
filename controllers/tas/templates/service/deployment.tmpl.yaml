kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  name: {{ .Instance.Name }}
  namespace: {{ .Instance.Namespace }}
  labels:
    app: {{ .Instance.Name }}
    app.kubernetes.io/instance: {{ .Instance.Name }}
    app.kubernetes.io/name: {{ .Instance.Name }}
    app.kubernetes.io/part-of: trustyai
    app.kubernetes.io/version: {{ .Version }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Instance.Name }}
      app.kubernetes.io/instance: {{ .Instance.Name }}
      app.kubernetes.io/name: {{ .Instance.Name }}
      app.kubernetes.io/part-of: trustyai
      app.kubernetes.io/version: {{ .Version }}
  template:
    metadata:
      labels:
        app: {{ .Instance.Name }}
        app.kubernetes.io/instance: {{ .Instance.Name }}
        app.kubernetes.io/name: {{ .Instance.Name }}
        app.kubernetes.io/part-of: trustyai
        app.kubernetes.io/version: {{ .Version }}
      annotations:
        prometheus.io/path: /q/metrics
        prometheus.io/scheme: http
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: {{ .Instance.Name }}-proxy
      containers:
        - name: trustyai-service
          image: {{ .ServiceImage }}
          env:
            - name: SERVICE_STORAGE_FORMAT
              value: {{ .Instance.Spec.Storage.Format }}
            {{ if eq .Instance.Spec.Storage.Format "PVC" }}
            - name: STORAGE_DATA_FILENAME
              value: {{ .Instance.Spec.Data.Filename }}
            - name: STORAGE_DATA_FOLDER
              value: {{ .Instance.Spec.Storage.Folder }}
            - name: SERVICE_DATA_FORMAT
              value: {{ .Instance.Spec.Data.Format }}
            - name: QUARKUS_HIBERNATE_ORM_ACTIVE
              value: false
            {{ end }}
            {{ if .Instance.IsMigration }}
            - name: STORAGE_DATA_FILENAME
              value: {{ .Instance.Spec.Data.Filename }}
            - name: STORAGE_DATA_FOLDER
              value: {{ .Instance.Spec.Storage.Folder }}
            - name: SERVICE_DATA_FORMAT
              value: {{ .Instance.Spec.Data.Format }}
            {{ end }}
            {{ if eq .Instance.Spec.Storage.Format "DATABASE" }}
            - name: QUARKUS_HIBERNATE_ORM_ACTIVE
              value: true
            - name: QUARKUS_DATASOURCE_DB_KIND
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databaseKind
            - name: QUARKUS_DATASOURCE_JDBC_MAX_SIZE
              value: 16
            - name: QUARKUS_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databaseUsername
            - name: QUARKUS_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databasePassword
            - name: DATABASE_SERVICE
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databaseService
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databasePort
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databaseName
            - name: QUARKUS_DATASOURCE_JDBC_URL
            {{ if .UseDBTLSCerts }}
              value: "jdbc:${QUARKUS_DATASOURCE_DB_KIND}://${DATABASE_SERVICE}:${DATABASE_PORT}/${DATABASE_NAME}?requireSSL=true&sslMode=verify-ca&serverSslCert=/etc/tls/db/ca.crt"
            {{ else }}
              value: "jdbc:${QUARKUS_DATASOURCE_DB_KIND}://${DATABASE_SERVICE}:${DATABASE_PORT}/${DATABASE_NAME}"
            {{ end }}
            - name: SERVICE_DATA_FORMAT
              value: "HIBERNATE"
            - name: QUARKUS_DATASOURCE_GENERATION
              valueFrom:
                secretKeyRef:
                  name: {{ .Instance.Spec.Storage.DatabaseConfigurations }}
                  key: databaseGeneration
            {{ end }}
            - name: SERVICE_METRICS_SCHEDULE
              value: {{ .Instance.Spec.Metrics.Schedule }}
            - name: SERVICE_BATCH_SIZE
              value: {{ .BatchSize }}
            {{ if .Instance.IsMigration }}
            - name: STORAGE_MIGRATION_CONFIG_FROM_FOLDER
              value: {{ .Instance.Spec.Storage.Folder }}
            - name: STORAGE_MIGRATION_CONFIG_FROM_FILENAME
              value: {{ .Instance.Spec.Data.Filename }}
            {{ end }}
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          volumeMounts:
            - name: {{ .Instance.Name }}-internal
              readOnly: false
              mountPath: /etc/tls/internal
            {{ if or (eq .Instance.Spec.Storage.Format "PVC") (.Instance.IsMigration) }}
            - name: {{ .VolumeMountName }}
              mountPath: {{ .Instance.Spec.Storage.Folder }}
              readOnly: false
            {{ end }}
            {{ if .UseDBTLSCerts }}
            - name: db-ca-cert
              mountPath: /etc/tls/db
              readOnly: true
            {{ end }}
        - name: kube-rbac-proxy
          image: {{ .KubeRBACProxyImage }}
          args:
            - --secure-listen-address=0.0.0.0:8443
            - --upstream=http://127.0.0.1:8080/
            - --config-file=/etc/kube-rbac-proxy/config.yaml
            - --tls-cert-file=/etc/tls/private/tls.crt
            - --tls-private-key-file=/etc/tls/private/tls.key
            - --proxy-endpoints-port=9443
            - --v=0
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 9443
              name: proxy-healthz
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
            - name: {{ .Instance.Name }}-tls
              mountPath: /etc/tls/private
              readOnly: true
            - name: kube-rbac-proxy-config
              mountPath: /etc/kube-rbac-proxy
              readOnly: true
            {{ if .CustomCertificatesBundle.IsDefined }}
            - name: {{ .CustomCertificatesBundle.VolumeName }}
              readOnly: true
              mountPath: /etc/ssl/certs/ca-bundle.crt
              subPath: ca-bundle.crt
            {{ end }}
      serviceAccount: {{ .Instance.Name }}-proxy
      volumes:
        {{ if or (eq .Instance.Spec.Storage.Format "PVC") ( .Instance.IsMigration) }}
        - name: volume
          persistentVolumeClaim:
            claimName: {{ .PVCClaimName }}
        {{ end }}
        {{ if .CustomCertificatesBundle.IsDefined }}
        - name: {{ .CustomCertificatesBundle.VolumeName}}
          configMap:
            name: {{ .CustomCertificatesBundle.ConfigMapName }}
            defaultMode: 420
        {{ end }}
        - name: {{ .Instance.Name}}-tls
          secret:
            secretName: {{ .Instance.Name }}-tls
            defaultMode: 420
        - name: {{ .Instance.Name}}-internal
          secret:
            secretName: {{ .Instance.Name }}-internal
            defaultMode: 420
        - name: kube-rbac-proxy-config
          configMap:
            name: {{ .Instance.Name }}-kube-rbac-proxy-config
            defaultMode: 420
        {{ if .UseDBTLSCerts }}
        - name: db-ca-cert
          secret:
            secretName: {{ .Instance.Name }}-db-ca
            defaultMode: 420
        {{ end }}
