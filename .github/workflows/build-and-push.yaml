name: Build and Push
on:
  push:
    branches:
      - main
    tags:
      - v*
    paths-ignore:
      - "LICENSE"
      - "**/.gitignore"
      - "**.md"
      - "**.adoc"
      - "*.txt"
  pull_request_target:
    paths-ignore:
      - "LICENSE"
      - "**/.gitignore"
      - "**.md"
      - "**.adoc"
      - "*.txt"
    types: [labeled, opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  # Ensure that tests pass before publishing a new image.
  build-and-push-ci:
    if: github.repository == 'trustyai-explainability/trustyai-service-operator'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps: # Assign context variable for various action contexts (tag, main, CI)
      - name: Assigning CI context
        if: github.head_ref != '' && github.head_ref != 'main' && !startsWith(github.ref, 'refs/tags/v')
        run: echo "BUILD_CONTEXT=ci" >> $GITHUB_ENV
      - name: Assigning tag context
        if: github.head_ref == '' && startsWith(github.ref, 'refs/tags/v')
        run: echo "BUILD_CONTEXT=tag" >> $GITHUB_ENV
      - name: Assigning main context
        if: github.head_ref == '' && github.ref == 'refs/heads/main'
        run: echo "BUILD_CONTEXT=main" >> $GITHUB_ENV

      # Run checkouts
      - uses: mheap/github-action-required-labels@v4
        if: env.BUILD_CONTEXT == 'ci'
        with:
          mode: minimum
          count: 1
          labels: "ok-to-test, lgtm, approved"
      - uses: actions/checkout@v3
        if: env.BUILD_CONTEXT == 'ci'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v3
        if: env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
      #
      - name: Set main-branch/default environment
        run: |
          echo "OPERATOR_TAG=latest" >> $GITHUB_ENV
          echo "LMES_DRIVER_TAG=latest" >> $GITHUB_ENV
          echo "LMES_JOB_TAG=latest" >> $GITHUB_ENV
          echo "ORCH_TAG=latest" >> $GITHUB_ENV
          
          echo "OPERATOR_IMAGE_NAME=${{ vars.QUAY_RELEASE_REPO }}" >> $GITHUB_ENV
          echo "LMES_DRIVER_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_DRIVER_REPO }}" >> $GITHUB_ENV
          echo "LMES_JOB_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_JOB_REPO }}" >> $GITHUB_ENV
          echo "ORCH_IMAGE_NAME=${{ vars.QUAY_RELEASE_GUARDRAILS_REPO }}" >> $GITHUB_ENV

      - name: Set tag environment
        if: env.BUILD_CONTEXT == 'tag'
        run: |
          echo "OPERATOR_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "LMES_DRIVER_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "LMES_JOB_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ORCH_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          
          echo "OPERATOR_IMAGE_NAME=${{ vars.QUAY_RELEASE_REPO }}" >> $GITHUB_ENV
          echo "LMES_DRIVER_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_DRIVER_REPO }}" >> $GITHUB_ENV
          echo "LMES_JOB_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_JOB_REPO }}" >> $GITHUB_ENV
          echo "ORCH_IMAGE_NAME=${{ vars.QUAY_RELEASE_GUARDRAILS_REPO }}" >> $GITHUB_ENV

      # Set environments depending on context
      - name: Set CI environment
        if: env.BUILD_CONTEXT == 'ci'
        run: |
          echo "OPERATOR_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=quay.io/trustyai/trustyai-service-operator-ci" >> $GITHUB_ENV

      - name: Set CI environment - LMES
        if: env.BUILD_CONTEXT == 'ci' && contains(github.event.pull_request.labels.*.name, 'needs-lmes-build')
        run: |
          echo "LMES_DRIVER_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "LMES_JOB_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "LMES_DRIVER_IMAGE_NAME=quay.io/trustyai/ta-lmes-driver-ci" >> $GITHUB_ENV
          echo "LMES_JOB_IMAGE_NAME=quay.io/trustyai/ta-lmes-job-ci" >> $GITHUB_ENV

      - name: Set CI environment - Orchestrator
        if: env.BUILD_CONTEXT == 'ci' && contains(github.event.pull_request.labels.*.name, 'needs-orchestrator-build')
        run: |
          echo "ORCH_IMAGE_NAME=quay.io/trustyai/ta-guardrails-orchestrator-ci" >> $GITHUB_ENV
          echo "ORCH_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      # Print variables for debugging
      - name: Log reference variables
        run: |
          echo "CONTEXT: ${{ env.BUILD_CONTEXT }}"
          echo "GITHUB.REF: ${{ github.ref }}"
          echo "GITHUB.HEAD_REF: ${{ github.head_ref }}"
          echo "SHA: ${{ github.event.pull_request.head.sha }}"
          echo "MAIN IMAGE AT: ${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}"
          echo "LMES DRIVER IMAGE AT: ${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}"
          echo "LMES JOB IMAGE AT: ${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}"
          echo "GUARDRAILS ORCH IMAGE AT: ${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}"

      # Run docker commands
      - name: Put expiry date on CI-tagged image
        if: env.BUILD_CONTEXT == 'ci'
        run: sed -i 's#summary="odh-trustyai-service-operator\"#summary="odh-trustyai-service-operator" \\ \n      quay.expires-after=7d#' Dockerfile
      - name: Log in to Quay
        run: docker login -u ${{ secrets.QUAY_ROBOT_USERNAME }} -p ${{ secrets.QUAY_ROBOT_SECRET }} quay.io
      - name: Build main image
        run: docker build -t ${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }} .
      - name: Push main image to Quay
        run: docker push ${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}

      # LMES Driver Builds
      - name: Build LMES driver image
        if: contains(github.event.pull_request.labels.*.name, 'needs-lmes-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker build -f Dockerfile.driver -t ${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }} .
      - name: Push LMES driver image to Quay
        if: contains(github.event.pull_request.labels.*.name, 'needs-lmes-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker push ${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}

      # LMES Job Builds
      - name: Build LMES job image
        if: contains(github.event.pull_request.labels.*.name, 'needs-lmes-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker build -f Dockerfile.lmes-job -t ${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }} .
      - name: Push LMES job image to Quay
        if: contains(github.event.pull_request.labels.*.name, 'needs-lmes-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker push ${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}

      # Orchestrator Builds
      - name: Build Guardrails orchestrator image
        if: contains(github.event.pull_request.labels.*.name, 'needs-orchestrator-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker build -f Dockerfile.orchestrator -t ${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }} .
      - name: Push Guardrails orchestrator image to Quay
        if: contains(github.event.pull_request.labels.*.name, 'needs-orchestrator-build') ||  env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
        run: docker push ${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}

      # Create CI Manifests
      - name: Set up manifests for CI
        if: env.BUILD_CONTEXT == 'ci'
        run: |
          sed -i "s#quay.io/trustyai/trustyai-service-operator:latest#${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}#" ./config/base/params.env
          sed -i "s#quay.io/trustyai/trustyai-service-operator:latest#${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}#" ./config/overlays/odh/params.env
          sed -i "s#quay.io/trustyai/trustyai-service-operator:latest#${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}#" ./config/overlays/rhoai/params.env
          
          sed -i "s#quay.io/trustyai/ta-lmes-driver:latest#${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}#" ./config/base/params.env
          sed -i "s#quay.io/trustyai/ta-lmes-driver:latest#${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}#" ./config/overlays/odh/params.env
          sed -i "s#quay.io/trustyai/ta-lmes-driver:latest#${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}#" ./config/overlays/rhoai/params.env
          
          sed -i "s#quay.io/trustyai/ta-lmes-job:latest#${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}#" ./config/base/params.env
          sed -i "s#quay.io/trustyai/ta-lmes-job:latest#${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}#" ./config/overlays/odh/params.env
          sed -i "s#quay.io/trustyai/ta-lmes-job:latest#${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}#" ./config/overlays/rhoai/params.env
          
          sed -i "s#quay.io/trustyai/ta-guardrails-orchestrator:latest#${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}#" ./config/base/params.env
          sed -i "s#quay.io/trustyai/ta-guardrails-orchestrator:latest#${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}#" ./config/overlays/odh/params.env
          sed -i "s#quay.io/trustyai/ta-guardrails-orchestrator:latest#${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}#" ./config/overlays/rhoai/params.env
          
          
          rm -Rf $(ls . | grep -v config)
          rm -Rf .gitignore .dockerignore .github .git .yamllint.yaml
      # pysh to ci-manifest repo
      - uses: cpina/github-action-push-to-another-repository@main
        if: env.BUILD_CONTEXT == 'ci'
        env:
          SSH_DEPLOY_KEY: ${{ secrets.TRUSTYAI_CI_BOT_SSH_KEY}}
        with:
          source-directory: "."
          destination-github-username: "trustyai-ci-bot"
          destination-repository-username: "trustyai-explainability"
          destination-repository-name: "trustyai-service-operator-ci"
          target-branch: operator-${{ env.OPERATOR_TAG }}
          create-target-branch-if-needed: "true"

      # Leave comment
      - uses: peter-evans/find-comment@v3
        name: Find Comment
        id: fc
        if: env.BUILD_CONTEXT == 'ci'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: PR image build and manifest generation completed successfully
      - uses: peter-evans/create-or-update-comment@v4
        name: Generate/update success message comment
        if: env.BUILD_CONTEXT == 'ci'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            PR image build and manifest generation completed successfully!

            📦 [PR image](https://${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}): `${{ env.OPERATOR_IMAGE_NAME }}:${{ env.OPERATOR_TAG }}`

            📦 [LMES driver image](https://${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}): `${{ env.LMES_DRIVER_IMAGE_NAME }}:${{ env.LMES_DRIVER_TAG }}`

            📦 [LMES job image](https://${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}): `${{ env.LMES_JOB_IMAGE_NAME }}:${{ env.LMES_JOB_TAG }}`

            📦 [Guardrails orchestrator image](https://${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}): `${{ env.ORCH_IMAGE_NAME }}:${{ env.ORCH_TAG }}`

            🗂️ [CI manifests](https://github.com/trustyai-explainability/trustyai-service-operator-ci/tree/operator-${{ env.OPERATOR_TAG }})

            ```
                  devFlags:
                    manifests:
                      - contextDir: config
                        sourcePath: ''
                        uri: https://api.github.com/repos/trustyai-explainability/trustyai-service-operator-ci/tarball/operator-${{ env.OPERATOR_TAG }}
            ```
